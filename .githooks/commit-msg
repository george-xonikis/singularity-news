#!/bin/bash

# commit-msg hook to validate conventional commit format

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Read the commit message
commit_regex='^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?: .{1,100}$'
merge_regex='^Merge '

# Get the commit message from the file
commit_message=$(cat "$1")

# Get just the first line for validation (ignore body and footer)
first_line=$(echo "$commit_message" | head -n1)

# Check if it's a merge commit (allow these through)
if [[ "$first_line" =~ $merge_regex ]]; then
    exit 0
fi

# Validate the commit message format
if ! [[ "$first_line" =~ $commit_regex ]]; then
    echo -e "${RED}❌ Commit message does not follow Conventional Commits format!${NC}"
    echo ""
    echo -e "${YELLOW}Expected format:${NC}"
    echo -e "  ${BLUE}<type>(<scope>): <subject>${NC}"
    echo ""
    echo -e "${YELLOW}Allowed types:${NC}"
    echo -e "  ${GREEN}feat${NC}     - A new feature"
    echo -e "  ${GREEN}fix${NC}      - A bug fix"
    echo -e "  ${GREEN}docs${NC}     - Documentation only changes"
    echo -e "  ${GREEN}style${NC}    - Changes that don't affect code meaning (formatting, etc)"
    echo -e "  ${GREEN}refactor${NC} - Code change that neither fixes a bug nor adds a feature"
    echo -e "  ${GREEN}perf${NC}     - Code change that improves performance"
    echo -e "  ${GREEN}test${NC}     - Adding or updating tests"
    echo -e "  ${GREEN}chore${NC}    - Changes to build process or auxiliary tools"
    echo -e "  ${GREEN}build${NC}    - Changes that affect the build system"
    echo -e "  ${GREEN}ci${NC}       - Changes to CI configuration files and scripts"
    echo -e "  ${GREEN}revert${NC}   - Reverts a previous commit"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo -e "  feat: add user authentication"
    echo -e "  fix(api): resolve database connection timeout"
    echo -e "  docs: update README with setup instructions"
    echo -e "  refactor(frontend): simplify state management"
    echo ""
    echo -e "${RED}Your message:${NC} $first_line"
    echo ""
    echo -e "${YELLOW}Do you want to continue with this non-conventional commit message? (y/n)${NC}"
    read -n 1 -r < /dev/tty
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}Commit aborted. Please use conventional commit format.${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}✓ Commit message follows conventional format${NC}"
exit 0